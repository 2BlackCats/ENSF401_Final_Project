pipeline {
    agent any

    environment {
        REPO_URI = "${env.REGISTRY_URI}/${env.PROJECT_ID}/${env.REGISTRY_NAME}"
        IMAGE_TAG = "${env.BUILD_ID}"
    }

    stages {
        stage('Checkout') {
            steps {
                checkout([
                    $class: 'GitSCM', 
                    branches: [[name: '*/main']], 
                    extensions: [], 
                    userRemoteConfigs: [[credentialsId: 'GITHUB', url: "https://github.com/Axeloooo/ChoreSync.git"]]
                ])
            }
        }

        stage("Build and Push Images") {
            steps {
                withCredentials([file(credentialsId: "GCP_CREDENTIALS", variable: "GCP_KEY")]) {
                    sh "gcloud auth activate-service-account --key-file=${GCP_KEY}"
                    sh "gcloud auth configure-docker ${env.REGISTRY_URI} --quiet"
                    script {
                        def services = [
                            "registry-service",
                            "config-service",
                            "api-gateway",
                            "auth-service",
                            "user-service",
                            "task-service",
                            "household-service",
                            "userhousehold-service",
                            "announcement-service",
                            "event-service",
                            "email-service"
                        ]

                        services.each { service ->
                            def image = docker.build("${REPO_URI}/${service}:${IMAGE_TAG}", "backend/${service}")
                            image.push()
                        }
                    }
                }
            }
        }


        stage("Deploy to GKE") {
            steps {
                script {
                    sh "rm -r backend/k8s/combined.yml"
                    sh "sed -i 's|axeloooo|${REPO_URI}|g' backend/k8s/*.yml"
                    sh "sed -i 's|latest|${IMAGE_TAG}|g' backend/k8s/*.yml"
                    sh "cat backend/k8s/*.yml > backend/k8s/combined.yml"
                    step([
                        $class: 'KubernetesEngineBuilder', 
                        projectId: "${env.PROJECT_ID}", 
                        clusterName: "${env.CLUSTER_NAME}", 
                        location: "${env.CLUSTER_LOCATION}", 
                        credentialsId: "${env.PROJECT_ID}", 
                        verifyDeployments: true,
                        manifestPattern: "backend/k8s/combined.yml",
                    ])
                }
            }
        }
    }
}

